<linebreak> ::= (\r\n|\r|\n) --  line break
<lineend> ::= <linebreak> | ";" | <empty>

<program identifier> ::= <identifier>
<identifier> ::= letter { letter | digit } -- an identifier has to start with an letter

<sign> ::= - | +
<empty> ::= 

<unsigned number> ::= <unsigned integer> | <unsigned real>
<unsigned integer> ::= <digit> {<digit>}
<unsigned real> ::= <unsigned integer> . <unsigned integer> | <unsigned integer> . <unsigned integer> "e" <scale factor> | <unsigned integer> "e" <scale factor>
<scale factor> ::= <unsigned integer> | <sign> <unsigned integer>

<string> ::= "string" "["<index type>{","<index type>}"]"

<from> ::= "from" <identifier> | <empty>

<label> ::= <identifier> ":" <lineend>

-- program definition

<program> ::= "program" <program identifier> <linebreak> <block> "begin" <statement list> "end" <program identifier> <linebreak> <routine implementation part>

<routine implementation part> ::= "routine" <identifier> <linebreak> <variable declaration part> <constant definition part> <type definition part> <statement part> "end" <identifier>

<block> ::=  <constant definition part> <type definition part> <variable declaration part> <routine declaration part>

------------------------------- constant part definition
<constant definition part> ::= <empty> | "const" <constant definition> { <lineend> <constant definition>} <linebreak>
<constant definition> ::= <identifier> "=" <constant> | <empty>
<constant> ::= <unsigned number> | <sign> <unsigned number> | <constant identifier> | <sign> <constant identifier> | <string> 
<constant identifier> ::= <identifier>

-------------------------------- typedefinition part
<type definition part> ::= <empty> | "type" <type definition> {<lineend> <type definition>} <linebreak>
<type definition> ::= <identifier> {"," <identifier>} ":" <type> <linebreak> | <empty>
<type> ::= <simple type> | <structured type> | "byte" | "short" | "boolean"
--simple
<simple type> ::= <scalar type> | <subrange type> | <type identifier>
<scalar type> ::= <identifier> {","<identifier>}
<subrange type> ::= <constant>
<type identifier> ::= <identifier>
--structured
<structured type> ::= <array type> | <structured type>
<array type> ::= "array" "["<index type>{","<index type>}"]" "of" <component type>
<index type> ::= <simple type> | "*"
<component type> ::= <type>
<structured type> ::= "structure" <identifier> <lineend> <type definition> {"," <type definition>} <lineend> "endstructure"

--------------------------------- var type declaration 
<variable declaration part> ::= <empty> | "var" <lineend> <variable definition> {"," <variable definition>} <linebreak> 
<variable definition> ::= <identifier> {"," <identifier>} ":" <type> | <empty> | <identifier> {"," <identifier>} <from> ":" <type>

--------------------------------- routine declaration
<routine declaration part> ::= <empty> | "routine" <identifier> "(" <type definition> {"," <type definition>} ")" ":" <type> <lineend> <from> | "routine" <identifier> "(" <type definition> {"," <type definition>} ")" ":" <type> <lineend> <variable declaration part> <constant definition part> <statement part> "end" <identifier> <linebreak>

--------------------------------- statementpart
<statement part> ::= <compound statement>
<compound statement> ::= "begin" <statement> {<lineend> <statement> }
<statement> ::= <simple statement> | <structured statement>
<simple statement> ::= <assignment statement> | <procedure statement> | <go to statement> | <empty statement>
<assignment statement> ::= <identifier> ":" <expression>

<procedure statement> ::= <procedure identifier> | <procedure identifier> (<actual parameter> {, <actual parameter> })
<procedure identifier> ::= <identifier>
<actual parameter> ::= <expression> | <variable> | <procedure identifier> | <function identifier>

<go to statement> ::= "goto" <label> | "go" "to" <label>
<empty statement> ::= <empty>

<structured statement> ::= <compound statement> | <conditional statement> | <repetitive statement> | <with statement>

