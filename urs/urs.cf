-- universal robot has a simple language to run function on the ur robot
-- this file makes supports the development of a small parser
--
--      def foo(a=1, b=1.9):
--          return a+b
--      end
--
--      x = foo()
--
--
-- ToDo: Threads
-- ToDo: Robot sprecific datadypes
comment "#" ;
comment ";" ;

Prog. Program ::= [Function] ;

(:[]).    [Function] ::= Function ;
(:).      [Function] ::= Function [Function];

Fun.  Function ::= "def" Ident "(" [Decl] ")" ":" [Stm] "end" ;
EFun. Function ::= Exp ;
Dec.  Decl     ::= Ident "=" Exp;

(:[]).    [Decl] ::= Decl;
(:).      [Decl] ::= Decl "," [Decl]; 

SDecl.   Stm ::= Decl ;
SPDecl.  Stm ::= Decl "=" Exp ;
SExp.    Stm ::= Exp ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= "while" Exp ":" Stm "end";
SIfOne.  Stm ::= "if" Exp ":" Stm "end";
SIfTwo.  Stm ::= "if" Exp ":" Stm "elif" Exp ":" Stm "end";
SElse.   Stm ::= Stm "else" Stm ; 
SReturn. Stm ::= "return" Exp ;

(:[]).   [Stm] ::= Stm ;
(:).     [Stm] ::= Stm [Stm];

OLt.      Op0      ::= "<" ;
OGt.      Op0      ::= ">" ;
OEq.      Op0      ::= "==" ;
ONEq.     Op0      ::= "!=" ;
OPlus.    Op1      ::= "+" ;
OTimes.   Op2      ::= "*" ;
OMinus.   Op1      ::= "-" ;
ODiv.     Op1      ::= "/" ;
ONEq.     Op       ::= "not" ;
OAnd.     Op       ::= "and" ;
OOr.      Op       ::= "or" ;
OOr.      Op       ::= "xor" ;

EOpA.     Exp      ::= Exp0 Op  Exp0 ;
EOpE.     Exp      ::= Exp1 Op  Exp1 ;
EOpB.     Exp0     ::= Exp1 Op0 Exp1 ;
EOpC.     Exp1     ::= Exp1 Op1 Exp2 ;
EOpD.     Exp2     ::= Exp2 Op2 Exp3 ;

EVar.     Exp3     ::= Ident ;
EInt.     Exp3     ::= Integer ;
EChar.    Exp3     ::= Char ;
EDouble.  Exp3     ::= Double ;

_.        Exp      ::= Exp0 ;
_.        Exp0     ::= Exp1 ;
_.        Exp1     ::= Exp2 ;
_.        Exp2     ::= Exp3 ;
_.        Exp3     ::= "(" Exp ")" ;

  